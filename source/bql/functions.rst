*********
Functions
*********

BQL provides a number of built-in functions that are described in this chapter.
Function names and meaning of parameters have been heavily inspired by `PostgreSQL <http://www.postgresql.org/docs/9.5/static/functions.html>`_.
However, be aware that the accepted and returned types may differ as there is no simple mapping between BQL and SQL data types.
See the :ref:`Function Reference <ref_func>` for details about each function's behavior.

Numeric Functions
=================

General Functions
-----------------

The table below shows some common mathematical functions that can be used in BQL.

+----------------------------------------------------------+--------------------------------------------+
| Function                                                 | Description                                |
+==========================================================+============================================+
| :ref:`abs(x) <ref_func_abs>`                             | absolute value                             |
+----------------------------------------------------------+--------------------------------------------+
| :ref:`cbrt(x) <ref_func_cbrt>`                           | cube root                                  |
+----------------------------------------------------------+--------------------------------------------+
| :ref:`ceil(x) <ref_func_ceil>`                           | round up to nearest integer                |
+----------------------------------------------------------+--------------------------------------------+
| :ref:`degrees(x) <ref_func_degrees>`                     | radians to degrees                         |
+----------------------------------------------------------+--------------------------------------------+
| :ref:`div(y, x) <ref_func_div>`                          | integer quotient of ``y``/``x``            |
+----------------------------------------------------------+--------------------------------------------+
| :ref:`exp(x) <ref_func_exp>`                             | exponential                                |
+----------------------------------------------------------+--------------------------------------------+
| :ref:`floor(x) <ref_func_floor>`                         | round down to nearest integer              |
+----------------------------------------------------------+--------------------------------------------+
| :ref:`ln(x) <ref_func_ln>`                               | natural logarithm                          |
+----------------------------------------------------------+--------------------------------------------+
| :ref:`log(x) <ref_func_log>`                             | base 10 logarithm                          |
+----------------------------------------------------------+--------------------------------------------+
| :ref:`log(b, x) <ref_func_log>`                          | logarithm to base b                        |
+----------------------------------------------------------+--------------------------------------------+
| :ref:`mod(y, x) <ref_func_mod>`                          | remainder of ``y``/``x``                   |
+----------------------------------------------------------+--------------------------------------------+
| :ref:`pi() <ref_func_pi>`                                | "Ï€" constant                               |
+----------------------------------------------------------+--------------------------------------------+
| :ref:`power(a, b) <ref_func_power>`                      | ``a`` raised to the power of ``b``         |
+----------------------------------------------------------+--------------------------------------------+
| :ref:`radians(x) <ref_func_radians>`                     | degrees to radians                         |
+----------------------------------------------------------+--------------------------------------------+
| :ref:`round(x) <ref_func_round>`                         | round to nearest integer                   |
+----------------------------------------------------------+--------------------------------------------+
| :ref:`sign(x) <ref_func_sign>`                           | sign of the argument (-1, 0, +1)           |
+----------------------------------------------------------+--------------------------------------------+
| :ref:`sqrt(x) <ref_func_sqrt>`                           | square root                                |
+----------------------------------------------------------+--------------------------------------------+
| :ref:`trunc(x) <ref_func_trunc>`                         | truncate toward zero                       |
+----------------------------------------------------------+--------------------------------------------+
| :ref:`width_bucket(x, l, r, c) <ref_func_width_bucket>`  | bucket of ``x`` in a histogram             |
+----------------------------------------------------------+--------------------------------------------+


Pseudo-Random Functions
-----------------------

The table below shows functions for generating pseudo-random numbers.

+--------------------------------------+-----------------------------------------------------------------------+
| Function                             | Description                                                           |
+======================================+=======================================================================+
| :ref:`random() <ref_func_random>`    | random value in the range :math:`0.0 <= x < 1.0`                      |
+--------------------------------------+-----------------------------------------------------------------------+
| :ref:`setseed(x) <ref_func_setseed>` | set seed (:math:`-1.0 <= x <= 1.0`) for subsequent ``random()`` calls |
+--------------------------------------+-----------------------------------------------------------------------+


Trigonometric Functions
-----------------------

Finally, the table below shows the available trigonometric functions.

+--------------------------------+-----------------+
| Function                       | Description     |
+================================+=================+
| :ref:`acos(x) <ref_func_acos>` | inverse cosine  |
+--------------------------------+-----------------+
| :ref:`asin(x) <ref_func_asin>` | inverse sine    |
+--------------------------------+-----------------+
| :ref:`atan(x) <ref_func_atan>` | inverse tangent |
+--------------------------------+-----------------+
| :ref:`cos(x) <ref_func_cos>`   | cosine          |
+--------------------------------+-----------------+
| :ref:`cot(x) <ref_func_cot>`   | cotangent       |
+--------------------------------+-----------------+
| :ref:`sin(x) <ref_func_sin>`   | sine            |
+--------------------------------+-----------------+
| :ref:`tan(x) <ref_func_tan>`   | tangent         |
+--------------------------------+-----------------+


String Functions
================

The table below shows some common functions for strings that can be used in BQL.

+-------------------------------------------------------+---------------------------------------------------+
| Function                                              | Description                                       |
+=======================================================+===================================================+
| :ref:`bit_length(s) <ref_func_bit_length>`            | number of bits in string                          |
+-------------------------------------------------------+---------------------------------------------------+
| :ref:`btrim(s) <ref_func_btrim>`                      |   remove whitespace from the start/end of ``s``   |
+-------------------------------------------------------+---------------------------------------------------+
| :ref:`btrim(s, chars) <ref_func_btrim>`               | remove ``chars`` from the start/end of ``s``      |
+-------------------------------------------------------+---------------------------------------------------+
| :ref:`char_length(s) <ref_func_char_length>`          | number of characters in ``s``                     |
+-------------------------------------------------------+---------------------------------------------------+
| :ref:`concat(s [, ...]) <ref_func_concat>`            | concatenate all arguments                         |
+-------------------------------------------------------+---------------------------------------------------+
| :ref:`concat_ws(sep, s [, ...]) <ref_func_concat_ws>` | concatenate arguments ``s`` with separator        |
+-------------------------------------------------------+---------------------------------------------------+
| :ref:`format(s, [x, ...]) <ref_func_format>`          | format arguments using a format string            |
+-------------------------------------------------------+---------------------------------------------------+
| :ref:`lower(s) <ref_func_lower>`                      | convert ``s`` to lower case                       |
+-------------------------------------------------------+---------------------------------------------------+
| :ref:`ltrim(s) <ref_func_ltrim>`                      | remove whitespace from the start of ``s``         |
+-------------------------------------------------------+---------------------------------------------------+
| :ref:`ltrim(s, chars) <ref_func_ltrim>`               | remove ``chars`` from the start of ``s``          |
+-------------------------------------------------------+---------------------------------------------------+
| :ref:`md5(s) <ref_func_md5>`                          | MD5 hash of ``s``                                 |
+-------------------------------------------------------+---------------------------------------------------+
| :ref:`octet_length(s) <ref_func_octet_length>`        | number of bytes in ``s``                          |
+-------------------------------------------------------+---------------------------------------------------+
| :ref:`overlay(s, r, from) <ref_func_overlay>`         | replace substring                                 |
+-------------------------------------------------------+---------------------------------------------------+
| :ref:`overlay(s, r, from, for) <ref_func_overlay>`    | replace substring                                 |
+-------------------------------------------------------+---------------------------------------------------+
| :ref:`rtrim(s) <ref_func_rtrim>`                      | remove whitespace from the end of ``s``           |
+-------------------------------------------------------+---------------------------------------------------+
| :ref:`rtrim(s, chars) <ref_func_rtrim>`               | remove ``chars`` from the end of ``s``            |
+-------------------------------------------------------+---------------------------------------------------+
| :ref:`sha1(s) <ref_func_sha1>`                        | SHA1 hash of ``s``                                |
+-------------------------------------------------------+---------------------------------------------------+
| :ref:`sha256(s) <ref_func_sha256>`                    | SHA256 hash of ``s``                              |
+-------------------------------------------------------+---------------------------------------------------+
| :ref:`strpos(s, t) <ref_func_strpos>`                 | location of substring ``t`` in ``s``              |
+-------------------------------------------------------+---------------------------------------------------+
| :ref:`substring(s, r) <ref_func_substring>`           | extract substring matching regex ``r`` from ``s`` |
+-------------------------------------------------------+---------------------------------------------------+
| :ref:`substring(s, from) <ref_func_substring>`        | extract substring                                 |
+-------------------------------------------------------+---------------------------------------------------+
| :ref:`substring(s, from, for) <ref_func_substring>`   | extract substring                                 |
+-------------------------------------------------------+---------------------------------------------------+
| :ref:`upper(s) <ref_func_upper>`                      | convert ``s`` to upper case                       |
+-------------------------------------------------------+---------------------------------------------------+


Time Functions
==============

+-----------------------------------------------------+--------------------------------------------------------------+
| Function                                            | Description                                                  |
+=====================================================+==============================================================+
| :ref:`distance_us(u, v) <ref_func_distance_us>`     | signed temporal distance from ``u`` to ``v`` in microseconds |
+-----------------------------------------------------+--------------------------------------------------------------+
| :ref:`clock_timestamp() <ref_func_clock_timestamp>` | current date and time (changes during statement execution)   |
+-----------------------------------------------------+--------------------------------------------------------------+
| :ref:`now() <ref_func_now>`                         | date and time when processing of current tuple was started   |
+-----------------------------------------------------+--------------------------------------------------------------+


Other Scalar Functions
======================

+------------------------------------------------+--------------------------------------------+
| Function                                       | Description                                |
+================================================+============================================+
| :ref:`coalesce(x [, ...]) <ref_func_coalesce>` | return first non-null input parameter      |
+------------------------------------------------+--------------------------------------------+


Aggregate Functions
===================

Aggregate functions compute a single result from a set of input values.
The built-in normal aggregate functions are listed in the table below.
The special syntax considerations for aggregate functions are explained in `Aggregate Expressions`_.

+---------------------------------------------------------+---------------------------------------------------------------+
| Function                                                | Description                                                   |
+=========================================================+===============================================================+
| :ref:`array_agg(x) <ref_func_array_agg>`                | input values, including nulls, concatenated into an array     |
+---------------------------------------------------------+---------------------------------------------------------------+
| :ref:`avg(x) <ref_func_avg>`                            | the average (arithmetic mean) of all input values             |
+---------------------------------------------------------+---------------------------------------------------------------+
| :ref:`bool_and(x) <ref_func_bool_and>`                  | true if all input values are true, otherwise false            |
+---------------------------------------------------------+---------------------------------------------------------------+
| :ref:`bool_or(x) <ref_func_bool_or>`                    | true if at least one input value is true, otherwise false     |
+---------------------------------------------------------+---------------------------------------------------------------+
| :ref:`count(x) <ref_func_count>`                        | number of input rows for which ``x`` is not null              |
+---------------------------------------------------------+---------------------------------------------------------------+
| :ref:`count(*) <ref_func_count>`                        | number of input rows                                          |
+---------------------------------------------------------+---------------------------------------------------------------+
| :ref:`json_object_agg(k, v) <ref_func_json_object_agg>` | aggregates name/value pairs as a map                          |
+---------------------------------------------------------+---------------------------------------------------------------+
| :ref:`max(x) <ref_func_max>`                            | maximum value of ``x`` across all input values                |
+---------------------------------------------------------+---------------------------------------------------------------+
| :ref:`median(x) <ref_func_median>`                      | the median of all input values                                |
+---------------------------------------------------------+---------------------------------------------------------------+
| :ref:`min(x) <ref_func_min>`                            | minimum value of ``x`` across all input values                |
+---------------------------------------------------------+---------------------------------------------------------------+
| :ref:`string_agg(x, sep) <ref_func_string_agg>`         | input values concatenated into a string, separated by ``sep`` |
+---------------------------------------------------------+---------------------------------------------------------------+
| :ref:`sum(x) <ref_func_sum>`                            | sum of ``x`` across all input values                          |
+---------------------------------------------------------+---------------------------------------------------------------+
