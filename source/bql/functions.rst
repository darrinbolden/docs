*********
Functions
*********

BQL provides a number of built-in functions that are described in this chapter.
Function names and meaning of parameters have been heavily inspired by `PostgreSQL <http://www.postgresql.org/docs/9.5/static/functions.html>`_.
However, be aware that the accepted and returned types may differ as there is no simple mapping between BQL and SQL data types.

Numeric Functions
=================

General Functions
-----------------

The table below shows some common mathematical functions that can be used in BQL.

+----------------------------------+------------------------------------------------------+-------------------------------+---------------+
| Function                         | Description                                          | Example                       | Result        |
+==================================+======================================================+===============================+===============+
| ``abs(x)``                       | absolute value                                       | ``abs(-17.4)``                | ``17.4``      |
+----------------------------------+------------------------------------------------------+-------------------------------+---------------+
| ``cbrt(x)``                      | cube root                                            | ``cbrt(27.0)``, |br|          | ``3.0``, |br| |
|                                  |                                                      | ``cbrt(-3)``                  | ``-1.442...`` |
+----------------------------------+------------------------------------------------------+-------------------------------+---------------+
| ``ceil(x)``                      | smallest integer not less than argument              | ``ceil(1.3)``, |br|           | ``2.0``, |br| |
|                                  |                                                      | ``ceil(-1.7)``                | ``-1.0``      |
+----------------------------------+------------------------------------------------------+-------------------------------+---------------+
| ``degrees(x)``                   | radians to degrees                                   | ``degrees(3.14159...)``       | ``180.0``     |
+----------------------------------+------------------------------------------------------+-------------------------------+---------------+
| ``div(y, x)``                    | integer quotient of ``y``/``x``                      | ``div(9, 4)``, |br|           | ``2``, |br|   |
|                                  |                                                      | ``div(9.3, 4.5)``             | ``2.0``       |
+----------------------------------+------------------------------------------------------+-------------------------------+---------------+
| ``exp(x)``                       | exponential                                          | ``exp(1.0)``                  | ``2.7182...`` |
+----------------------------------+------------------------------------------------------+-------------------------------+---------------+
| ``floor(x)``                     | largest integer not greater than argument            | ``floor(1.3)``, |br|          | ``1.0``, |br| |
|                                  |                                                      | ``floor(-1.7)``               | ``-2.0``      |
+----------------------------------+------------------------------------------------------+-------------------------------+---------------+
| ``ln(x)``                        | natural logarithm                                    | ``ln(2)``                     | ``0.6931...`` |
+----------------------------------+------------------------------------------------------+-------------------------------+---------------+
| ``log(x)``                       | base 10 logarithm                                    | ``log(100)``                  | ``2.0``       |
+----------------------------------+------------------------------------------------------+-------------------------------+---------------+
| ``log(b, x)``                    | logarithm to base b                                  | ``log(2.5, 6.25)``, |br|      | ``2.0``, |br| |
|                                  |                                                      | ``log(2, 8)``                 | ``3.0``       |
+----------------------------------+------------------------------------------------------+-------------------------------+---------------+
| ``mod(y, x)``                    | remainder of ``y``/``x``                             | ``mod(9, 4)``, |br|           | ``1``, |br|   |
|                                  |                                                      | ``mod(9.3, 4.5)``             | ``0.3``       |
+----------------------------------+------------------------------------------------------+-------------------------------+---------------+
| ``pi()``                         | "Ï€" constant                                         | ``pi()``                      | ``3.1415...`` |
+----------------------------------+------------------------------------------------------+-------------------------------+---------------+
| ``power(a, b)``                  | ``a`` raised to the power of ``b``                   | ``power(9.0, 3.0)``, |br|     | ``729.0``,    |
|                                  |                                                      | ``power(2, -1)``              | |br| ``0.5``  |
+----------------------------------+------------------------------------------------------+-------------------------------+---------------+
| ``radians(x)``                   | degrees to radians                                   | ``radians(180)``              | ``3.1415...`` |
+----------------------------------+------------------------------------------------------+-------------------------------+---------------+
| ``round(x)``                     | round to nearest integer                             | ``round(1.3)``, |br|          | ``1.0``, |br| |
|                                  |                                                      | ``round(-1.7)``               | ``-2.0``      |
+----------------------------------+------------------------------------------------------+-------------------------------+---------------+
| ``sign(x)``                      | sign of the argument (-1, 0, +1)                     | ``sign(-8.4)``                | ``-1``        |
+----------------------------------+------------------------------------------------------+-------------------------------+---------------+
| ``sqrt(x)``                      | square root                                          | ``sqrt(2)``                   | ``1.4142...`` |
+----------------------------------+------------------------------------------------------+-------------------------------+---------------+
| ``trunc(x)``                     | truncate toward zero                                 | ``trunc(1.3)``, |br|          | ``1.0``, |br| |
|                                  |                                                      | ``trunc(-1.7)``               | ``-1.0``      |
+----------------------------------+------------------------------------------------------+-------------------------------+---------------+
| ``width_bucket(x, l, r, count)`` | return the bucket number to which ``x`` would be     | ``width_bucket(5, 0, 10, 5)`` | ``3``         |
|                                  | assigned in a histogram having ``count`` equal-width |                               |               |
|                                  | buckets spanning the range ``l`` to ``r``; returns   |                               |               |
|                                  | ``0`` or ``count+1`` for an input outside the range  |                               |               |
+----------------------------------+------------------------------------------------------+-------------------------------+---------------+

If a given parameter is outside the mathematically valid range for that function (e.g., ``sqrt(-2)``, ``log(0)``, ``div(2.0, 0.0)``) and the return type is ``float``, then ``NaN`` is returned.
However, if the return type is ``int`` (e.g., ``div(2, 0)``), there is no ``NaN`` option and an error will occur instead.


Pseudo-Random Functions
-----------------------

The table below shows functions for generating pseudo-random numbers.

+----------------+-----------------------------------------------------------------------+
| Function       | Description                                                           |
+================+=======================================================================+
| ``random()``   | random value in the range :math:`0.0 <= x < 1.0`                      |
+----------------+-----------------------------------------------------------------------+
| ``setseed(x)`` | set seed (:math:`-1.0 <= x <= 1.0`) for subsequent ``random()`` calls |
+----------------+-----------------------------------------------------------------------+

The characteristics of the values returned by ``random()`` are equal to those from `the Go rand module <https://golang.org/pkg/math/rand/>`_.
It is not suitable for cryptographic applications.


Trigonometric Functions
-----------------------

Finally, the table below shows the available trigonometric functions.
All trigonometric functions take arguments and return values of type ``float``.
Trigonometric functions arguments are expressed in radians.
Inverse functions return values are expressed in radians.


+-------------+-----------------+
| Function    | Description     |
+=============+=================+
| ``acos(x)`` | inverse cosine  |
+-------------+-----------------+
| ``asin(x)`` | inverse sine    |
+-------------+-----------------+
| ``atan(x)`` | inverse tangent |
+-------------+-----------------+
| ``cos(x)``  | cosine          |
+-------------+-----------------+
| ``cot(x)``  | cotangent       |
+-------------+-----------------+
| ``sin(x)``  | sine            |
+-------------+-----------------+
| ``tan(x)``  | tangent         |
+-------------+-----------------+


String Functions
================

The table below shows some common functions for strings that can be used in BQL.

+-------------------------------+--------------------------------------------------------------------------+---------------------------------------+------------------------------------------------------------------------+
| Function                      | Description                                                              | Example                               | Result                                                                 |
+===============================+==========================================================================+=======================================+========================================================================+
| ``bit_length(s)``             | Number of bits in string                                                 | ``bit_length("Ã¼ber")``                | ``40``                                                                 |
+-------------------------------+--------------------------------------------------------------------------+---------------------------------------+------------------------------------------------------------------------+
| ``btrim(s)``                  | Remove whitespace from the start and end of ``s``                        | ``btrim("  trim  ")``                 | ``"trim"``                                                             |
+-------------------------------+--------------------------------------------------------------------------+---------------------------------------+------------------------------------------------------------------------+
| ``btrim(s, chars)``           | Remove the longest string consisting only of characters in ``chars``     | ``btrim("xyxtrimyyx", "xy")``         | ``"trim"``                                                             |
|                               | from the start and end of ``s``                                          |                                       |                                                                        |
+-------------------------------+--------------------------------------------------------------------------+---------------------------------------+------------------------------------------------------------------------+
| ``char_length(s)``            | Number of characters in ``s``                                            | ``char_length("Ã¼ber")``               | ``4``                                                                  |
+-------------------------------+--------------------------------------------------------------------------+---------------------------------------+------------------------------------------------------------------------+
| ``concat(s [, ...])``         | Concatenate the text representations of all the arguments.               | ``concat("abc", NULL, "22")``         | ``"abc22"``                                                            |
|                               | NULL arguments are ignored.                                              |                                       |                                                                        |
+-------------------------------+--------------------------------------------------------------------------+---------------------------------------+------------------------------------------------------------------------+
| ``concat_ws(sep, s [, ...])`` | Concatenate all but the first argument with separators.                  | ``concat_ws("-", "abc", NULL, "22")`` | ``"abc-22"``                                                           |
|                               | The first argument is used as the separator string.                      |                                       |                                                                        |
|                               | NULL arguments are ignored.                                              |                                       |                                                                        |
+-------------------------------+--------------------------------------------------------------------------+---------------------------------------+------------------------------------------------------------------------+
| ``format(s, [x, ...])``       | Format arguments according to a format string.                           | ``format("%s-%d", "abc", 22)``        | ``"abc-22"``                                                           |
|                               | This function is similar to the Go function ``fmt.Sprintf``.             |                                       |                                                                        |
+-------------------------------+--------------------------------------------------------------------------+---------------------------------------+------------------------------------------------------------------------+
| ``lower(s)``                  | Convert ``s`` to lower case                                              | ``lower("ÃœBer")``                     | ``"Ã¼ber"``                                                             |
+-------------------------------+--------------------------------------------------------------------------+---------------------------------------+------------------------------------------------------------------------+
| ``ltrim(s)``                  | Remove whitespace from the start of ``s``                                | ``ltrim("  trim  ")``                 | ``"trim  "``                                                           |
+-------------------------------+--------------------------------------------------------------------------+---------------------------------------+------------------------------------------------------------------------+
| ``ltrim(s, chars)``           | Remove the longest string consisting only of characters in ``chars``     | ``ltrim("xyxtrimyyx", "xy")``         | ``"trimyyx"``                                                          |
|                               | from the start of ``s``                                                  |                                       |                                                                        |
+-------------------------------+--------------------------------------------------------------------------+---------------------------------------+------------------------------------------------------------------------+
| ``md5(s)``                    | Calculates the MD5 hash of ``s``, returning the result in hexadecimal    | ``md5("abc")``                        | ``"900150983cd24fb0d6963f7d28e17f72"``                                 |
+-------------------------------+--------------------------------------------------------------------------+---------------------------------------+------------------------------------------------------------------------+
| ``octet_length(s)``           | Number of bytes in ``s``                                                 | ``octet_length("Ã¼ber")``              | ``5``                                                                  |
+-------------------------------+--------------------------------------------------------------------------+---------------------------------------+------------------------------------------------------------------------+
| ``overlay(s, r, from)``       | Replace substring                                                        | ``overlay("Txxxxas", "hom", 2)``      | ``"Thomxas"``                                                          |
+-------------------------------+--------------------------------------------------------------------------+---------------------------------------+------------------------------------------------------------------------+
| ``overlay(s, r, from, for)``  | Replace substring                                                        | ``overlay("Txxxxas", "hom", 2, 4)``   | ``"Thomas"``                                                           |
+-------------------------------+--------------------------------------------------------------------------+---------------------------------------+------------------------------------------------------------------------+
| ``rtrim(s)``                  | Remove whitespace from the end of ``s``                                  | ``rtrim("  trim  ")``                 | ``"  trim"``                                                           |
+-------------------------------+--------------------------------------------------------------------------+---------------------------------------+------------------------------------------------------------------------+
| ``rtrim(s, chars)``           | Remove the longest string consisting only of characters in ``chars``     | ``rtrim("xyxtrimyyx", "xy")``         | ``"xyxtrim"``                                                          |
|                               | from the end of ``s``                                                    |                                       |                                                                        |
+-------------------------------+--------------------------------------------------------------------------+---------------------------------------+------------------------------------------------------------------------+
| ``sha1(s)``                   | Calculates the SHA1 hash of ``s``, returning the result in hexadecimal   | ``sha1("abc")``                       | ``"a9993e364706816aba3e25717850c26c9cd0d89d"``                         |
+-------------------------------+--------------------------------------------------------------------------+---------------------------------------+------------------------------------------------------------------------+
| ``sha256(s)``                 | Calculates the SHA256 hash of ``s``, returning the result in hexadecimal | ``sha256("abc")``                     | ``"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad"`` |
+-------------------------------+--------------------------------------------------------------------------+---------------------------------------+------------------------------------------------------------------------+
| ``strpos(s, t)``              | Location of specified substring ``t`` in ``s``                           | ``strpos("high", "ig")``              | ``2``                                                                  |
+-------------------------------+--------------------------------------------------------------------------+---------------------------------------+------------------------------------------------------------------------+
| ``substring(s, r)``           | Extract substring matching regular expression ``r`` from ``s``.          | ``substring("Thomas", "...$")``       | ``"mas"``                                                              |
|                               | See Go ``regexp`` package for details of matching.                       |                                       |                                                                        |
+-------------------------------+--------------------------------------------------------------------------+---------------------------------------+------------------------------------------------------------------------+
| ``substring(s, from)``        | Extract substring                                                        | ``substring("Thomas", 2)``            | ``"homas"``                                                            |
+-------------------------------+--------------------------------------------------------------------------+---------------------------------------+------------------------------------------------------------------------+
| ``substring(s, from, for)``   | Extract substring                                                        | ``substring("Thomas", 2, 3)``         | ``"hom"``                                                              |
+-------------------------------+--------------------------------------------------------------------------+---------------------------------------+------------------------------------------------------------------------+
| ``upper(s)``                  | Convert ``s`` to upper case                                              | ``upper("ÃœBer")``                     | ``"ÃœBER"``                                                             |
+-------------------------------+--------------------------------------------------------------------------+---------------------------------------+------------------------------------------------------------------------+


Time Functions
==============

+-----------------------+--------------------------------------------------------------+
| Function              | Description                                                  |
+=======================+==============================================================+
| ``distance_us(u, v)`` | Signed temporal distance from ``u`` to ``v`` in microseconds |
+-----------------------+--------------------------------------------------------------+
| ``clock_timestamp()`` | Current date and time (changes during statement execution)   |
+-----------------------+--------------------------------------------------------------+
| ``now()``             | Date and time when processing of current tuple was started   |
+-----------------------+--------------------------------------------------------------+


Other Scalar Functions
======================

+-------------------------+--------------------------------------------+-------------------------------+--------+
| Function                | Description                                | Example                       | Result |
+=========================+============================================+===============================+========+
| ``coalesce(x [, ...])`` | Returns the first non-null input parameter | ``coalesce(NULL, 17, "foo")`` | ``17`` |
|                         | or NULL if there is no such parameter      |                               |        |
+-------------------------+--------------------------------------------+-------------------------------+--------+


Aggregate Functions
===================

Aggregate functions compute a single result from a set of input values.
The built-in normal aggregate functions are listed in the table below.
The special syntax considerations for aggregate functions are explained in `Aggregate Expressions`_.

+---------------------------+---------------------------------------------------------------+
| Function                  | Description                                                   |
+===========================+===============================================================+
| ``array_agg(x)``          | input values, including nulls, concatenated into an array     |
+---------------------------+---------------------------------------------------------------+
| ``avg(x)``                | the average (arithmetic mean) of all input values             |
+---------------------------+---------------------------------------------------------------+
| ``bool_and(x)``           | true if all input values are true, otherwise false            |
+---------------------------+---------------------------------------------------------------+
| ``bool_or(x)``            | true if at least one input value is true, otherwise false     |
+---------------------------+---------------------------------------------------------------+
| ``count(x)``              | number of input rows for which ``x`` is not null              |
+---------------------------+---------------------------------------------------------------+
| ``count(*)``              | number of input rows                                          |
+---------------------------+---------------------------------------------------------------+
| ``json_object_agg(k, v)`` | aggregates name/value pairs as a map                          |
+---------------------------+---------------------------------------------------------------+
| ``max(x)``                | maximum value of ``x`` across all input values                |
+---------------------------+---------------------------------------------------------------+
| ``median(x)``             | the median of all input values                                |
+---------------------------+---------------------------------------------------------------+
| ``min(x)``                | minimum value of ``x`` across all input values                |
+---------------------------+---------------------------------------------------------------+
| ``string_agg(x, sep)``    | input values concatenated into a string, separated by ``sep`` |
+---------------------------+---------------------------------------------------------------+
| ``sum(x)``                | sum of ``x`` across all input values                          |
|                           |                                                               |
+---------------------------+---------------------------------------------------------------+

It should be noted that except for ``count``, these functions return a ``NULL`` value when no rows are selected.
In particular, ``sum`` of no rows returns ``NULL``, not zero as one might expect, and ``array_agg`` returns ``NULL`` rather than an empty array when there are no input rows.
The ``coalesce`` function can be used to substitute zero or an empty array for ``NULL`` when necessary.
